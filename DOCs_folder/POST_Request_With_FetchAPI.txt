Como realizar una solicitud POST en React con Fetch API?

Podemos utilizar el método HTTP POST para mandar data a un endpoint.
Funciona de una manera similar a la solicitud request, la mayor diferencia
es que necesitamos definir que tipo de método vamos a solicitar (recordemos
que Fetch es por defecto GET) y dos parámetros adicionales al objeto opcional.



const addPosts = async (title, body) => {
await fetch('https://jsonplaceholder.typicode.com/posts', {
method: 'POST',
body: JSON.stringify({
   title: title,
   body: body,
   userId: Math.random().toString(36).slice(2),
}),
headers: {
   'Content-type': 'application/json; charset=UTF-8',
},
})
.then((response) => response.json())
.then((data) => {
   setPosts((posts) => [data, ...posts]);
   setTitle('');
   setBody('');
})
.catch((err) => {
   console.log(err.message);
});
};

El cuerpo sostiene la data que deseamos pasar dentro de la API, que primero
debemos "stringifiar" porque estamos mandando data a un servidor web (sólo acepta
formato string).
El header nos dice el tipo de data, la cual siempre es la misma cuando consumimos
una API REST.
También configuramos el estado para contener la nueva data y distribuir los nuevos
datos en nuestro array.
Si observamos el método addPost() que creamos, este espera esa data que proviene de
un formulario u otra cosa. En este caso, nosotros creamos un formulario, obteniendo
la data via estados y luego añadiendola al método cuando el formulario fue enviado.


import React, { useState, useEffect } from 'react';

const App = () => {
const [title, setTitle] = useState('');
const [body, setBody] = useState('');
// ...
const addPosts = async (title, body) => {
   await fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      body: JSON.stringify({
         title: title,
         body: body,
         userId: Math.random().toString(36).slice(2),
      }),
      headers: {
         'Content-type': 'application/json; charset=UTF-8',
      },
   })
      .then((response) => response.json())
      .then((data) => {
         setPosts((posts) => [data, ...posts]);
         setTitle('');
         setBody('');
      })
      .catch((err) => {
         console.log(err.message);
      });
};

const handleSubmit = (e) => {
   e.preventDefault();
   addPosts(title, body);
};    

return (
   <div className="app">
      <div className="add-post-container">
         <form onSubmit={handleSubmit}>
            <input type="text" className="form-control" value={title}
               onChange={(e) => setTitle(e.target.value)}
            />
            <textarea name="" className="form-control" id="" cols="10" rows="8" 
               value={body} onChange={(e) => setBody(e.target.value)} 
            ></textarea>
            <button type="submit">Add Post</button>
         </form>
      </div>
      {/* ... */}
   </div>
);
};

export default App;